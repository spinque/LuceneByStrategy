apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'

/* Gradle Wrapper */
task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

version = '0.1'
description = 'StrategyEditor'

sourceCompatibility = 1.7

repositories {        
  mavenCentral()
}
	
/*****************
* CONFIGURATION
*****************/
ext {
	appname='LuceneByStrategyEditor'
	deploy_serverUrl = 'http://localhost:8080/manager/text'
	deploy_username = 'admin'
	deploy_password = 'adminadmin'
	deploy_path = "/${appname}"
}

dependencies {
		// lib-gwt-svg must occur BEFORE gwt-user
		compile 'org.vectomatic:lib-gwt-svg:0.5.11'

		// only needed at compile-time
		providedCompile 'com.google.gwt:gwt-user:2.7.0'
		providedCompile 'com.google.gwt:gwt-dev:2.7.0'

		compile 'org.gwtopenmaps.openlayers:gwt-openlayers-client:1.0'
		compile 'javax.validation:validation-api:1.0.0.GA'
		compile 'com.google.gwt:gwt-user:2.7.0'
		compile 'com.google.gwt:gwt-dev:2.7.0'
		compile 'com.google.gwt:gwt-servlet:2.7.0'
		compile 'com.allen-sauer.gwt.dnd:gwt-dnd:3.3.4'
		compile 'com.google.gwt.google-apis:gwt-maps:1.0.4'
}


/*****************
* GWT
*****************/
task compileGwt (dependsOn: classes, type: JavaExec) {
	ext.sourceSet = sourceSets.main
	ext.buildDir = "${project.buildDir}/gwt"
	ext.extraDir = "${project.buildDir}/extra"

	inputs.source sourceSet.java.srcDirs
	inputs.dir sourceSet.output.resourcesDir
	outputs.dir buildDir
 
	doFirst {
		file(buildDir).mkdirs()
	}
 
	main = 'com.google.gwt.dev.Compiler'
 
	classpath {
		[
			sourceSet.java.srcDirs,        // Java source
			sourceSet.output.resourcesDir, // resources
			sourceSet.output.classesDir,   // classes
			sourceSet.compileClasspath     // deps
		]
	}
 
	args = [
		'com.spinque.gwt.EditorApplication',
		'-war', buildDir,
		'-logLevel', 'INFO',
		'-localWorkers', '4',
		'-compileReport',
		'-extra', extraDir,
		'-style','PRETTY', 
		'-draftCompile' // Speeds up compile with 25%
	]
 
	maxHeapSize = '512M'
}
 
/*****************
* WAR / Deployment
*****************/
webAppDirName = 'war'
war {
	dependsOn = [ compileGwt ]
	baseName = appname
	archiveName = "${appname}-${version}.war"
	from compileGwt.buildDir
}

configurations {
	tomcatAnt
}
dependencies {
  tomcatAnt 'org.apache.tomcat:tomcat-catalina-ant:7+'
}

ant.taskdef(name: 'start', classname: 'org.apache.catalina.ant.StartTask', classpath: configurations.tomcatAnt.asPath)
ant.taskdef(name: 'stop', classname: 'org.apache.catalina.ant.StopTask', classpath: configurations.tomcatAnt.asPath)
ant.taskdef(name: 'undeploy', classname: 'org.apache.catalina.ant.UndeployTask', classpath: configurations.tomcatAnt.asPath)
ant.taskdef(name: 'deploy', classname: 'org.apache.catalina.ant.DeployTask', classpath: configurations.tomcatAnt.asPath)
ant.taskdef(name: 'list', classname: 'org.apache.catalina.ant.ListTask', classpath: configurations.tomcatAnt.asPath)
ant.taskdef(name: 'reload', classname: 'org.apache.catalina.ant.ReloadTask', classpath: configurations.tomcatAnt.asPath)

task reDeploy << {

	logger.quiet "Stopping ${deploy_path}"
	ant.stop(version: project.version, url: deploy_serverUrl, path: deploy_path, 
		failonerror: false, username: deploy_username, password: deploy_password, 
		outputproperty: 'antStopOutput')
	logger.quiet ant.properties.antStopOutput
	logger.quiet ""
	
	logger.quiet "Undeploying ${deploy_path}"
	ant.undeploy(version: project.version, url: deploy_serverUrl, path: deploy_path,
		failonerror: false, username: deploy_username, password: deploy_password, 
		outputproperty: 'antUndeployOutput')
	logger.quiet ant.properties.antUndeployOutput
	logger.quiet ""

	logger.quiet "Deploying ${deploy_path}"
	ant.deploy(version: project.version, url: deploy_serverUrl, path: deploy_path,
		war: deploy_archivePath, failonerror: true, username: deploy_username, password: deploy_password,
		outputproperty: 'antDeployOutput')
	logger.quiet ant.properties.antDeployOutput
	logger.quiet ""
}



